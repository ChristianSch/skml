

.. _sphx_glr_auto_examples_example_cc.py:


=================================
Classifier Chain Example
=================================

An example of :class:`skml.problem_transformation.ClassifierChain`



.. code-block:: python


    from sklearn.metrics import hamming_loss
    from sklearn.metrics import accuracy_score
    from sklearn.metrics import f1_score
    from sklearn.metrics import precision_score
    from sklearn.metrics import recall_score
    from sklearn.ensemble import RandomForestClassifier
    import numpy as np


    from skml.problem_transformation import ClassifierChain
    from skml.datasets import load_dataset

    X, y = load_dataset('yeast')
    cc = ClassifierChain(RandomForestClassifier(),
                         threshold=.5)
    cc.fit(X, np.array(y))
    y_pred = cc.predict(X)

    print "real: ", y.shape
    print "y_pred: ", y_pred.shape
    y_pred_proba = cc.predict_proba(X)
    print "pred_proba: ", y_pred_proba

    print "hamming loss: "
    print hamming_loss(y, y_pred)

    print "accuracy:"
    print accuracy_score(y, y_pred)

    print "f1 score:"
    print "micro"
    print f1_score(y, y_pred, average='micro')
    print "macro"
    print f1_score(y, y_pred, average='macro')

    print "precision:"
    print "micro"
    print precision_score(y, y_pred, average='micro')
    print "macro"
    print precision_score(y, y_pred, average='macro')

    print "recall:"
    print "micro"
    print recall_score(y, y_pred, average='micro')
    print "macro"
    print recall_score(y, y_pred, average='macro')

**Total running time of the script:** ( 0 minutes  0.000 seconds)



.. container:: sphx-glr-download

    :download:`Download Python source code: example_cc.py <example_cc.py>`



.. container:: sphx-glr-download

    :download:`Download Jupyter notebook: example_cc.ipynb <example_cc.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
